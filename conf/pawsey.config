/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Pawsey Supercomputing Centre config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Configuration for running on Pawsey's Setonix HPC system
----------------------------------------------------------------------------------------
*/

cleanup = false
resume = true

process {
    cache = 'lenient'
    singularity.enabled = true
    singularity.autoMounts = true
    stageInMode = 'symlink'
    module = 'singularity/4.1.0-nompi'
    
    singularity {
        enabled = true
        cacheDir = "$MYSOFTWARE/.nextflow_singularity"
        envWhitelist = 'SINGULARITY_BINDPATH, SINGULARITYENV_LD_LIBRARY_PATH, SINGULARITYENV_LD_PRELOAD'
    }
    
    executor = 'slurm'
    clusterOptions = ' -A pawsey0964'

    // Process-specific resource requirements for Pawsey
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 60.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        cpus   = { check_max( 24    * task.attempt, 'cpus'    ) }
        memory = { check_max( 80.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
}

executor {
    queueSize = 1000
    $slurm {
        pollInterval = '1 min'
        queueStatInterval = '5 min'
    }
    $local {
        pollInterval = '2 sec'
    }
}

params {
    max_cpus = 36
    max_time = 24.h
    max_memory = 200.GB
}

env {
    PYTHONNOUSERSITE = 1
}